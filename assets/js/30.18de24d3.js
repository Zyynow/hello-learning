(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{313:function(t,a,s){"use strict";s.r(a);var e=s(10),r=Object(e.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"trees"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#trees"}},[t._v("#")]),t._v(" Trees")]),t._v(" "),a("h1",{attrs:{id:"trees-a-hierarchical-data-structure"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#trees-a-hierarchical-data-structure"}},[t._v("#")]),t._v(" Trees: A Hierarchical Data Structure")]),t._v(" "),a("p",[t._v("A "),a("strong",[t._v("Tree")]),t._v(" is a hierarchical data structure that consists of nodes connected by edges. It represents a structure with a root, branches, and leaves, similar to a family tree.")]),t._v(" "),a("h2",{attrs:{id:"characteristics-of-trees"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#characteristics-of-trees"}},[t._v("#")]),t._v(" Characteristics of Trees")]),t._v(" "),a("h3",{attrs:{id:"_1-root-node"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-root-node"}},[t._v("#")]),t._v(" 1. Root Node")]),t._v(" "),a("p",[t._v('The topmost node in the tree. Think of it as the starting point or the "ancestor" of all other nodes.')]),t._v(" "),a("h3",{attrs:{id:"_2-parent-and-child-nodes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-parent-and-child-nodes"}},[t._v("#")]),t._v(" 2. Parent and Child Nodes")]),t._v(" "),a("p",[t._v("Each node, except the root, has one parent and zero or more children.")]),t._v(" "),a("h3",{attrs:{id:"_3-leaves"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-leaves"}},[t._v("#")]),t._v(" 3. Leaves")]),t._v(" "),a("p",[t._v("Nodes that have no children are called leaves.")]),t._v(" "),a("h3",{attrs:{id:"_4-depth-and-height"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-depth-and-height"}},[t._v("#")]),t._v(" 4. Depth and Height")]),t._v(" "),a("p",[t._v("The depth of a node is the number of edges from the root to that node. The height of the tree is the number of edges in the longest path from the root to a leaf.")]),t._v(" "),a("h2",{attrs:{id:"types-of-trees"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#types-of-trees"}},[t._v("#")]),t._v(" Types of Trees")]),t._v(" "),a("h3",{attrs:{id:"_1-binary-tree"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-binary-tree"}},[t._v("#")]),t._v(" 1. Binary Tree")]),t._v(" "),a("p",[t._v("A tree in which each node has up to two children.")]),t._v(" "),a("h3",{attrs:{id:"_2-binary-search-tree-bst"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-binary-search-tree-bst"}},[t._v("#")]),t._v(" 2. Binary Search Tree (BST)")]),t._v(" "),a("p",[t._v("A binary tree where the left subtree contains only nodes with values less than the node's value, and the right subtree only nodes with values greater.")]),t._v(" "),a("h3",{attrs:{id:"_3-balanced-tree"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-balanced-tree"}},[t._v("#")]),t._v(" 3. Balanced Tree")]),t._v(" "),a("p",[t._v("A tree where the depth of all the leaves differs by at most one, ensuring efficient operations.")]),t._v(" "),a("h2",{attrs:{id:"example-in-code"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#example-in-code"}},[t._v("#")]),t._v(" Example in Code")]),t._v(" "),a("p",[t._v("Here's a simple example in Java of how you might create a binary tree:")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Node")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Node")]),t._v(" left"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" right"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Node")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("data "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    left "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" right "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Main")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Node")]),t._v(" root "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Node")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    root"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("left "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Node")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    root"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("right "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Node")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("15")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("root"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("left"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Outputs 5")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h2",{attrs:{id:"applications-of-trees"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#applications-of-trees"}},[t._v("#")]),t._v(" "),a("strong",[t._v("Applications of Trees")])]),t._v(" "),a("p",[t._v("Trees are used in many computer science applications, including:")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Database Systems")]),t._v(": For indexing and query optimization.")]),t._v(" "),a("li",[a("strong",[t._v("File Systems")]),t._v(": Representing the directory structure.")]),t._v(" "),a("li",[a("strong",[t._v("Game Trees")]),t._v(": In AI for games to evaluate possible moves.")])]),t._v(" "),a("h2",{attrs:{id:"conclusion"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#conclusion"}},[t._v("#")]),t._v(" "),a("strong",[t._v("Conclusion")])]),t._v(" "),a("p",[t._v("Trees are a rich and fundamental data structure, providing efficient ways to represent hierarchical relationships, organize data, and perform various algorithms. Understanding trees lays a strong foundation for exploring more advanced data structures and algorithms.")])])}),[],!1,null,null,null);a.default=r.exports}}]);